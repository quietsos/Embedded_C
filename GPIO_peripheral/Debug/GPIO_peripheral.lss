
GPIO_peripheral.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000942  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000984  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d12  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	63 c4       	rjmp	.+2246   	; 0x93e <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
#define led6 PB6
#define led7 PB7



int main(){
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	c4 55       	subi	r28, 0x54	; 84
  88:	d1 09       	sbc	r29, r1
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61


//	// basic way of controlling port
	DDRB = 0b00000010;
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	PORTB = 0b00000010;
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	22 e0       	ldi	r18, 0x02	; 2
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	aa e7       	ldi	r26, 0x7A	; 122
  ae:	b4 e4       	ldi	r27, 0x44	; 68
  b0:	8d 83       	std	Y+5, r24	; 0x05
  b2:	9e 83       	std	Y+6, r25	; 0x06
  b4:	af 83       	std	Y+7, r26	; 0x07
  b6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	4a e7       	ldi	r20, 0x7A	; 122
  be:	55 e4       	ldi	r21, 0x45	; 69
  c0:	6d 81       	ldd	r22, Y+5	; 0x05
  c2:	7e 81       	ldd	r23, Y+6	; 0x06
  c4:	8f 81       	ldd	r24, Y+7	; 0x07
  c6:	98 85       	ldd	r25, Y+8	; 0x08
  c8:	af d3       	rcall	.+1886   	; 0x828 <__mulsf3>
  ca:	dc 01       	movw	r26, r24
  cc:	cb 01       	movw	r24, r22
  ce:	8b a3       	std	Y+35, r24	; 0x23
  d0:	9c a3       	std	Y+36, r25	; 0x24
  d2:	ad a3       	std	Y+37, r26	; 0x25
  d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	5f e3       	ldi	r21, 0x3F	; 63
  de:	6b a1       	ldd	r22, Y+35	; 0x23
  e0:	7c a1       	ldd	r23, Y+36	; 0x24
  e2:	8d a1       	ldd	r24, Y+37	; 0x25
  e4:	9e a1       	ldd	r25, Y+38	; 0x26
  e6:	1f d3       	rcall	.+1598   	; 0x726 <__cmpsf2>
  e8:	88 23       	and	r24, r24
  ea:	2c f4       	brge	.+10     	; 0xf6 <main+0x7c>
		__ticks = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 a7       	std	Y+40, r25	; 0x28
  f2:	8f a3       	std	Y+39, r24	; 0x27
  f4:	3a c0       	rjmp	.+116    	; 0x16a <main+0xf0>
	else if (__tmp > 65535)
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	3f ef       	ldi	r19, 0xFF	; 255
  fa:	4f e7       	ldi	r20, 0x7F	; 127
  fc:	57 e4       	ldi	r21, 0x47	; 71
  fe:	6b a1       	ldd	r22, Y+35	; 0x23
 100:	7c a1       	ldd	r23, Y+36	; 0x24
 102:	8d a1       	ldd	r24, Y+37	; 0x25
 104:	9e a1       	ldd	r25, Y+38	; 0x26
 106:	8c d3       	rcall	.+1816   	; 0x820 <__gesf2>
 108:	18 16       	cp	r1, r24
 10a:	34 f5       	brge	.+76     	; 0x158 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e2       	ldi	r20, 0x20	; 32
 112:	51 e4       	ldi	r21, 0x41	; 65
 114:	6d 81       	ldd	r22, Y+5	; 0x05
 116:	7e 81       	ldd	r23, Y+6	; 0x06
 118:	8f 81       	ldd	r24, Y+7	; 0x07
 11a:	98 85       	ldd	r25, Y+8	; 0x08
 11c:	85 d3       	rcall	.+1802   	; 0x828 <__mulsf3>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	03 d3       	rcall	.+1542   	; 0x72e <__fixunssfsi>
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
 12c:	98 a7       	std	Y+40, r25	; 0x28
 12e:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
 130:	8f a1       	ldd	r24, Y+39	; 0x27
 132:	98 a5       	ldd	r25, Y+40	; 0x28
 134:	89 2b       	or	r24, r25
 136:	19 f1       	breq	.+70     	; 0x17e <main+0x104>
 138:	80 e9       	ldi	r24, 0x90	; 144
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	9a a7       	std	Y+42, r25	; 0x2a
 13e:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 140:	89 a5       	ldd	r24, Y+41	; 0x29
 142:	9a a5       	ldd	r25, Y+42	; 0x2a
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0xca>
 148:	9a a7       	std	Y+42, r25	; 0x2a
 14a:	89 a7       	std	Y+41, r24	; 0x29
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14c:	8f a1       	ldd	r24, Y+39	; 0x27
 14e:	98 a5       	ldd	r25, Y+40	; 0x28
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	98 a7       	std	Y+40, r25	; 0x28
 154:	8f a3       	std	Y+39, r24	; 0x27
 156:	ec cf       	rjmp	.-40     	; 0x130 <main+0xb6>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 158:	6b a1       	ldd	r22, Y+35	; 0x23
 15a:	7c a1       	ldd	r23, Y+36	; 0x24
 15c:	8d a1       	ldd	r24, Y+37	; 0x25
 15e:	9e a1       	ldd	r25, Y+38	; 0x26
 160:	e6 d2       	rcall	.+1484   	; 0x72e <__fixunssfsi>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
 166:	98 a7       	std	Y+40, r25	; 0x28
 168:	8f a3       	std	Y+39, r24	; 0x27
 16a:	8f a1       	ldd	r24, Y+39	; 0x27
 16c:	98 a5       	ldd	r25, Y+40	; 0x28
 16e:	9c a7       	std	Y+44, r25	; 0x2c
 170:	8b a7       	std	Y+43, r24	; 0x2b
 172:	8b a5       	ldd	r24, Y+43	; 0x2b
 174:	9c a5       	ldd	r25, Y+44	; 0x2c
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xfc>
 17a:	9c a7       	std	Y+44, r25	; 0x2c
 17c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	PORTB = 0b00000000;
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	10 82       	st	Z, r1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	aa e7       	ldi	r26, 0x7A	; 122
 18c:	b4 e4       	ldi	r27, 0x44	; 68
 18e:	8d 8b       	std	Y+21, r24	; 0x15
 190:	9e 8b       	std	Y+22, r25	; 0x16
 192:	af 8b       	std	Y+23, r26	; 0x17
 194:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	4a e7       	ldi	r20, 0x7A	; 122
 19c:	55 e4       	ldi	r21, 0x45	; 69
 19e:	6d 89       	ldd	r22, Y+21	; 0x15
 1a0:	7e 89       	ldd	r23, Y+22	; 0x16
 1a2:	8f 89       	ldd	r24, Y+23	; 0x17
 1a4:	98 8d       	ldd	r25, Y+24	; 0x18
 1a6:	40 d3       	rcall	.+1664   	; 0x828 <__mulsf3>
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	89 8f       	std	Y+25, r24	; 0x19
 1ae:	9a 8f       	std	Y+26, r25	; 0x1a
 1b0:	ab 8f       	std	Y+27, r26	; 0x1b
 1b2:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	5f e3       	ldi	r21, 0x3F	; 63
 1bc:	69 8d       	ldd	r22, Y+25	; 0x19
 1be:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1c4:	b0 d2       	rcall	.+1376   	; 0x726 <__cmpsf2>
 1c6:	88 23       	and	r24, r24
 1c8:	2c f4       	brge	.+10     	; 0x1d4 <main+0x15a>
		__ticks = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	9e 8f       	std	Y+30, r25	; 0x1e
 1d0:	8d 8f       	std	Y+29, r24	; 0x1d
 1d2:	3a c0       	rjmp	.+116    	; 0x248 <main+0x1ce>
	else if (__tmp > 65535)
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	3f ef       	ldi	r19, 0xFF	; 255
 1d8:	4f e7       	ldi	r20, 0x7F	; 127
 1da:	57 e4       	ldi	r21, 0x47	; 71
 1dc:	69 8d       	ldd	r22, Y+25	; 0x19
 1de:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1e4:	1d d3       	rcall	.+1594   	; 0x820 <__gesf2>
 1e6:	18 16       	cp	r1, r24
 1e8:	34 f5       	brge	.+76     	; 0x236 <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e2       	ldi	r20, 0x20	; 32
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	6d 89       	ldd	r22, Y+21	; 0x15
 1f4:	7e 89       	ldd	r23, Y+22	; 0x16
 1f6:	8f 89       	ldd	r24, Y+23	; 0x17
 1f8:	98 8d       	ldd	r25, Y+24	; 0x18
 1fa:	16 d3       	rcall	.+1580   	; 0x828 <__mulsf3>
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	94 d2       	rcall	.+1320   	; 0x72e <__fixunssfsi>
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22
 20a:	9e 8f       	std	Y+30, r25	; 0x1e
 20c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
 20e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 210:	9e 8d       	ldd	r25, Y+30	; 0x1e
 212:	89 2b       	or	r24, r25
 214:	19 f1       	breq	.+70     	; 0x25c <main+0x1e2>
 216:	80 e9       	ldi	r24, 0x90	; 144
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	98 a3       	std	Y+32, r25	; 0x20
 21c:	8f 8f       	std	Y+31, r24	; 0x1f
 21e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 220:	98 a1       	ldd	r25, Y+32	; 0x20
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x1a8>
 226:	98 a3       	std	Y+32, r25	; 0x20
 228:	8f 8f       	std	Y+31, r24	; 0x1f
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 22c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	9e 8f       	std	Y+30, r25	; 0x1e
 232:	8d 8f       	std	Y+29, r24	; 0x1d
 234:	ec cf       	rjmp	.-40     	; 0x20e <main+0x194>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 236:	69 8d       	ldd	r22, Y+25	; 0x19
 238:	7a 8d       	ldd	r23, Y+26	; 0x1a
 23a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 23c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 23e:	77 d2       	rcall	.+1262   	; 0x72e <__fixunssfsi>
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	9e 8f       	std	Y+30, r25	; 0x1e
 246:	8d 8f       	std	Y+29, r24	; 0x1d
 248:	8d 8d       	ldd	r24, Y+29	; 0x1d
 24a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 24c:	9a a3       	std	Y+34, r25	; 0x22
 24e:	89 a3       	std	Y+33, r24	; 0x21
 250:	89 a1       	ldd	r24, Y+33	; 0x21
 252:	9a a1       	ldd	r25, Y+34	; 0x22
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x1da>
 258:	9a a3       	std	Y+34, r25	; 0x22
 25a:	89 a3       	std	Y+33, r24	; 0x21
	_delay_ms(1000);



	DDRB = 0b11111111;
 25c:	84 e2       	ldi	r24, 0x24	; 36
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18

	while(1){

		// single pin led toggling using bit manipulation.
		PORTB = (1 << led5);
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	20 e2       	ldi	r18, 0x20	; 32
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	aa e7       	ldi	r26, 0x7A	; 122
 276:	b4 e4       	ldi	r27, 0x44	; 68
 278:	89 87       	std	Y+9, r24	; 0x09
 27a:	9a 87       	std	Y+10, r25	; 0x0a
 27c:	ab 87       	std	Y+11, r26	; 0x0b
 27e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 280:	8e 01       	movw	r16, r28
 282:	05 5b       	subi	r16, 0xB5	; 181
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	4a e7       	ldi	r20, 0x7A	; 122
 28c:	55 e4       	ldi	r21, 0x45	; 69
 28e:	69 85       	ldd	r22, Y+9	; 0x09
 290:	7a 85       	ldd	r23, Y+10	; 0x0a
 292:	8b 85       	ldd	r24, Y+11	; 0x0b
 294:	9c 85       	ldd	r25, Y+12	; 0x0c
 296:	c8 d2       	rcall	.+1424   	; 0x828 <__mulsf3>
 298:	dc 01       	movw	r26, r24
 29a:	cb 01       	movw	r24, r22
 29c:	f8 01       	movw	r30, r16
 29e:	80 83       	st	Z, r24
 2a0:	91 83       	std	Z+1, r25	; 0x01
 2a2:	a2 83       	std	Z+2, r26	; 0x02
 2a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 2a6:	ce 01       	movw	r24, r28
 2a8:	85 5b       	subi	r24, 0xB5	; 181
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e8       	ldi	r20, 0x80	; 128
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	fc 01       	movw	r30, r24
 2b6:	60 81       	ld	r22, Z
 2b8:	71 81       	ldd	r23, Z+1	; 0x01
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	93 81       	ldd	r25, Z+3	; 0x03
 2be:	33 d2       	rcall	.+1126   	; 0x726 <__cmpsf2>
 2c0:	88 23       	and	r24, r24
 2c2:	4c f4       	brge	.+18     	; 0x2d6 <main+0x25c>
		__ticks = 1;
 2c4:	ce 01       	movw	r24, r28
 2c6:	81 5b       	subi	r24, 0xB1	; 177
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	31 83       	std	Z+1, r19	; 0x01
 2d2:	20 83       	st	Z, r18
 2d4:	65 c0       	rjmp	.+202    	; 0x3a0 <main+0x326>
	else if (__tmp > 65535)
 2d6:	ce 01       	movw	r24, r28
 2d8:	85 5b       	subi	r24, 0xB5	; 181
 2da:	9f 4f       	sbci	r25, 0xFF	; 255
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	3f ef       	ldi	r19, 0xFF	; 255
 2e0:	4f e7       	ldi	r20, 0x7F	; 127
 2e2:	57 e4       	ldi	r21, 0x47	; 71
 2e4:	fc 01       	movw	r30, r24
 2e6:	60 81       	ld	r22, Z
 2e8:	71 81       	ldd	r23, Z+1	; 0x01
 2ea:	82 81       	ldd	r24, Z+2	; 0x02
 2ec:	93 81       	ldd	r25, Z+3	; 0x03
 2ee:	98 d2       	rcall	.+1328   	; 0x820 <__gesf2>
 2f0:	18 16       	cp	r1, r24
 2f2:	0c f0       	brlt	.+2      	; 0x2f6 <main+0x27c>
 2f4:	44 c0       	rjmp	.+136    	; 0x37e <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e2       	ldi	r20, 0x20	; 32
 2fc:	51 e4       	ldi	r21, 0x41	; 65
 2fe:	69 85       	ldd	r22, Y+9	; 0x09
 300:	7a 85       	ldd	r23, Y+10	; 0x0a
 302:	8b 85       	ldd	r24, Y+11	; 0x0b
 304:	9c 85       	ldd	r25, Y+12	; 0x0c
 306:	90 d2       	rcall	.+1312   	; 0x828 <__mulsf3>
 308:	dc 01       	movw	r26, r24
 30a:	cb 01       	movw	r24, r22
 30c:	8e 01       	movw	r16, r28
 30e:	01 5b       	subi	r16, 0xB1	; 177
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	0b d2       	rcall	.+1046   	; 0x72e <__fixunssfsi>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22
 31c:	f8 01       	movw	r30, r16
 31e:	91 83       	std	Z+1, r25	; 0x01
 320:	80 83       	st	Z, r24
		while(__ticks)
 322:	ce 01       	movw	r24, r28
 324:	81 5b       	subi	r24, 0xB1	; 177
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	91 81       	ldd	r25, Z+1	; 0x01
 32e:	89 2b       	or	r24, r25
 330:	09 f4       	brne	.+2      	; 0x334 <main+0x2ba>
 332:	50 c0       	rjmp	.+160    	; 0x3d4 <main+0x35a>
 334:	ce 01       	movw	r24, r28
 336:	8f 5a       	subi	r24, 0xAF	; 175
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	20 e9       	ldi	r18, 0x90	; 144
 33c:	31 e0       	ldi	r19, 0x01	; 1
 33e:	fc 01       	movw	r30, r24
 340:	31 83       	std	Z+1, r19	; 0x01
 342:	20 83       	st	Z, r18
 344:	ce 01       	movw	r24, r28
 346:	8f 5a       	subi	r24, 0xAF	; 175
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x2d6>
 354:	9e 01       	movw	r18, r28
 356:	2f 5a       	subi	r18, 0xAF	; 175
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	f9 01       	movw	r30, r18
 35c:	91 83       	std	Z+1, r25	; 0x01
 35e:	80 83       	st	Z, r24
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 360:	ce 01       	movw	r24, r28
 362:	81 5b       	subi	r24, 0xB1	; 177
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	9e 01       	movw	r18, r28
 368:	21 5b       	subi	r18, 0xB1	; 177
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	31 81       	ldd	r19, Z+1	; 0x01
 372:	21 50       	subi	r18, 0x01	; 1
 374:	31 09       	sbc	r19, r1
 376:	fc 01       	movw	r30, r24
 378:	31 83       	std	Z+1, r19	; 0x01
 37a:	20 83       	st	Z, r18
 37c:	d2 cf       	rjmp	.-92     	; 0x322 <main+0x2a8>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 37e:	8e 01       	movw	r16, r28
 380:	01 5b       	subi	r16, 0xB1	; 177
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	ce 01       	movw	r24, r28
 386:	85 5b       	subi	r24, 0xB5	; 181
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	fc 01       	movw	r30, r24
 38c:	60 81       	ld	r22, Z
 38e:	71 81       	ldd	r23, Z+1	; 0x01
 390:	82 81       	ldd	r24, Z+2	; 0x02
 392:	93 81       	ldd	r25, Z+3	; 0x03
 394:	cc d1       	rcall	.+920    	; 0x72e <__fixunssfsi>
 396:	dc 01       	movw	r26, r24
 398:	cb 01       	movw	r24, r22
 39a:	f8 01       	movw	r30, r16
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24
 3a0:	ce 01       	movw	r24, r28
 3a2:	8d 5a       	subi	r24, 0xAD	; 173
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	9e 01       	movw	r18, r28
 3a8:	21 5b       	subi	r18, 0xB1	; 177
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	31 81       	ldd	r19, Z+1	; 0x01
 3b2:	fc 01       	movw	r30, r24
 3b4:	31 83       	std	Z+1, r19	; 0x01
 3b6:	20 83       	st	Z, r18
 3b8:	ce 01       	movw	r24, r28
 3ba:	8d 5a       	subi	r24, 0xAD	; 173
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	fc 01       	movw	r30, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x34a>
 3c8:	9e 01       	movw	r18, r28
 3ca:	2d 5a       	subi	r18, 0xAD	; 173
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	f9 01       	movw	r30, r18
 3d0:	91 83       	std	Z+1, r25	; 0x01
 3d2:	80 83       	st	Z, r24
		_delay_ms(1000);
		PORTB = (0 << led5);
 3d4:	85 e2       	ldi	r24, 0x25	; 37
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	10 82       	st	Z, r1
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	aa e7       	ldi	r26, 0x7A	; 122
 3e2:	b4 e4       	ldi	r27, 0x44	; 68
 3e4:	8d 87       	std	Y+13, r24	; 0x0d
 3e6:	9e 87       	std	Y+14, r25	; 0x0e
 3e8:	af 87       	std	Y+15, r26	; 0x0f
 3ea:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3ec:	8e 01       	movw	r16, r28
 3ee:	0f 5b       	subi	r16, 0xBF	; 191
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	4a e7       	ldi	r20, 0x7A	; 122
 3f8:	55 e4       	ldi	r21, 0x45	; 69
 3fa:	6d 85       	ldd	r22, Y+13	; 0x0d
 3fc:	7e 85       	ldd	r23, Y+14	; 0x0e
 3fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 400:	98 89       	ldd	r25, Y+16	; 0x10
 402:	12 d2       	rcall	.+1060   	; 0x828 <__mulsf3>
 404:	dc 01       	movw	r26, r24
 406:	cb 01       	movw	r24, r22
 408:	f8 01       	movw	r30, r16
 40a:	80 83       	st	Z, r24
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	a2 83       	std	Z+2, r26	; 0x02
 410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 412:	ce 01       	movw	r24, r28
 414:	8f 5b       	subi	r24, 0xBF	; 191
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	40 e8       	ldi	r20, 0x80	; 128
 41e:	5f e3       	ldi	r21, 0x3F	; 63
 420:	fc 01       	movw	r30, r24
 422:	60 81       	ld	r22, Z
 424:	71 81       	ldd	r23, Z+1	; 0x01
 426:	82 81       	ldd	r24, Z+2	; 0x02
 428:	93 81       	ldd	r25, Z+3	; 0x03
 42a:	7d d1       	rcall	.+762    	; 0x726 <__cmpsf2>
 42c:	88 23       	and	r24, r24
 42e:	4c f4       	brge	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		__ticks = 1;
 430:	ce 01       	movw	r24, r28
 432:	8b 5b       	subi	r24, 0xBB	; 187
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	31 83       	std	Z+1, r19	; 0x01
 43e:	20 83       	st	Z, r18
 440:	65 c0       	rjmp	.+202    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	else if (__tmp > 65535)
 442:	ce 01       	movw	r24, r28
 444:	8f 5b       	subi	r24, 0xBF	; 191
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	3f ef       	ldi	r19, 0xFF	; 255
 44c:	4f e7       	ldi	r20, 0x7F	; 127
 44e:	57 e4       	ldi	r21, 0x47	; 71
 450:	fc 01       	movw	r30, r24
 452:	60 81       	ld	r22, Z
 454:	71 81       	ldd	r23, Z+1	; 0x01
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	93 81       	ldd	r25, Z+3	; 0x03
 45a:	e2 d1       	rcall	.+964    	; 0x820 <__gesf2>
 45c:	18 16       	cp	r1, r24
 45e:	0c f0       	brlt	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	44 c0       	rjmp	.+136    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e2       	ldi	r20, 0x20	; 32
 468:	51 e4       	ldi	r21, 0x41	; 65
 46a:	6d 85       	ldd	r22, Y+13	; 0x0d
 46c:	7e 85       	ldd	r23, Y+14	; 0x0e
 46e:	8f 85       	ldd	r24, Y+15	; 0x0f
 470:	98 89       	ldd	r25, Y+16	; 0x10
 472:	da d1       	rcall	.+948    	; 0x828 <__mulsf3>
 474:	dc 01       	movw	r26, r24
 476:	cb 01       	movw	r24, r22
 478:	8e 01       	movw	r16, r28
 47a:	0b 5b       	subi	r16, 0xBB	; 187
 47c:	1f 4f       	sbci	r17, 0xFF	; 255
 47e:	bc 01       	movw	r22, r24
 480:	cd 01       	movw	r24, r26
 482:	55 d1       	rcall	.+682    	; 0x72e <__fixunssfsi>
 484:	dc 01       	movw	r26, r24
 486:	cb 01       	movw	r24, r22
 488:	f8 01       	movw	r30, r16
 48a:	91 83       	std	Z+1, r25	; 0x01
 48c:	80 83       	st	Z, r24
		while(__ticks)
 48e:	ce 01       	movw	r24, r28
 490:	8b 5b       	subi	r24, 0xBB	; 187
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	89 2b       	or	r24, r25
 49c:	09 f4       	brne	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	50 c0       	rjmp	.+160    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 4a0:	ce 01       	movw	r24, r28
 4a2:	89 5b       	subi	r24, 0xB9	; 185
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	20 e9       	ldi	r18, 0x90	; 144
 4a8:	31 e0       	ldi	r19, 0x01	; 1
 4aa:	fc 01       	movw	r30, r24
 4ac:	31 83       	std	Z+1, r19	; 0x01
 4ae:	20 83       	st	Z, r18
 4b0:	ce 01       	movw	r24, r28
 4b2:	89 5b       	subi	r24, 0xB9	; 185
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c0:	9e 01       	movw	r18, r28
 4c2:	29 5b       	subi	r18, 0xB9	; 185
 4c4:	3f 4f       	sbci	r19, 0xFF	; 255
 4c6:	f9 01       	movw	r30, r18
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4cc:	ce 01       	movw	r24, r28
 4ce:	8b 5b       	subi	r24, 0xBB	; 187
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	9e 01       	movw	r18, r28
 4d4:	2b 5b       	subi	r18, 0xBB	; 187
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	f9 01       	movw	r30, r18
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	31 09       	sbc	r19, r1
 4e2:	fc 01       	movw	r30, r24
 4e4:	31 83       	std	Z+1, r19	; 0x01
 4e6:	20 83       	st	Z, r18
 4e8:	d2 cf       	rjmp	.-92     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4ea:	8e 01       	movw	r16, r28
 4ec:	0b 5b       	subi	r16, 0xBB	; 187
 4ee:	1f 4f       	sbci	r17, 0xFF	; 255
 4f0:	ce 01       	movw	r24, r28
 4f2:	8f 5b       	subi	r24, 0xBF	; 191
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	fc 01       	movw	r30, r24
 4f8:	60 81       	ld	r22, Z
 4fa:	71 81       	ldd	r23, Z+1	; 0x01
 4fc:	82 81       	ldd	r24, Z+2	; 0x02
 4fe:	93 81       	ldd	r25, Z+3	; 0x03
 500:	16 d1       	rcall	.+556    	; 0x72e <__fixunssfsi>
 502:	dc 01       	movw	r26, r24
 504:	cb 01       	movw	r24, r22
 506:	f8 01       	movw	r30, r16
 508:	91 83       	std	Z+1, r25	; 0x01
 50a:	80 83       	st	Z, r24
 50c:	ce 01       	movw	r24, r28
 50e:	87 5b       	subi	r24, 0xB7	; 183
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	9e 01       	movw	r18, r28
 514:	2b 5b       	subi	r18, 0xBB	; 187
 516:	3f 4f       	sbci	r19, 0xFF	; 255
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	31 81       	ldd	r19, Z+1	; 0x01
 51e:	fc 01       	movw	r30, r24
 520:	31 83       	std	Z+1, r19	; 0x01
 522:	20 83       	st	Z, r18
 524:	ce 01       	movw	r24, r28
 526:	87 5b       	subi	r24, 0xB7	; 183
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	fc 01       	movw	r30, r24
 52c:	80 81       	ld	r24, Z
 52e:	91 81       	ldd	r25, Z+1	; 0x01
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 534:	9e 01       	movw	r18, r28
 536:	27 5b       	subi	r18, 0xB7	; 183
 538:	3f 4f       	sbci	r19, 0xFF	; 255
 53a:	f9 01       	movw	r30, r18
 53c:	91 83       	std	Z+1, r25	; 0x01
 53e:	80 83       	st	Z, r24
		_delay_ms(1000);


		// multiple pin led/actuator toggle using bit manipulation

		PORTB = (1 << led1) | (1 << led2) | (1 << led5) | (1 << led6);
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	26 e6       	ldi	r18, 0x66	; 102
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	aa e7       	ldi	r26, 0x7A	; 122
 550:	b4 e4       	ldi	r27, 0x44	; 68
 552:	89 8b       	std	Y+17, r24	; 0x11
 554:	9a 8b       	std	Y+18, r25	; 0x12
 556:	ab 8b       	std	Y+19, r26	; 0x13
 558:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	4a e7       	ldi	r20, 0x7A	; 122
 560:	55 e4       	ldi	r21, 0x45	; 69
 562:	69 89       	ldd	r22, Y+17	; 0x11
 564:	7a 89       	ldd	r23, Y+18	; 0x12
 566:	8b 89       	ldd	r24, Y+19	; 0x13
 568:	9c 89       	ldd	r25, Y+20	; 0x14
 56a:	5e d1       	rcall	.+700    	; 0x828 <__mulsf3>
 56c:	dc 01       	movw	r26, r24
 56e:	cb 01       	movw	r24, r22
 570:	8f ab       	std	Y+55, r24	; 0x37
 572:	98 af       	std	Y+56, r25	; 0x38
 574:	a9 af       	std	Y+57, r26	; 0x39
 576:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e8       	ldi	r20, 0x80	; 128
 57e:	5f e3       	ldi	r21, 0x3F	; 63
 580:	6f a9       	ldd	r22, Y+55	; 0x37
 582:	78 ad       	ldd	r23, Y+56	; 0x38
 584:	89 ad       	ldd	r24, Y+57	; 0x39
 586:	9a ad       	ldd	r25, Y+58	; 0x3a
 588:	ce d0       	rcall	.+412    	; 0x726 <__cmpsf2>
 58a:	88 23       	and	r24, r24
 58c:	2c f4       	brge	.+10     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
		__ticks = 1;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9c af       	std	Y+60, r25	; 0x3c
 594:	8b af       	std	Y+59, r24	; 0x3b
 596:	3a c0       	rjmp	.+116    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
	else if (__tmp > 65535)
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	3f ef       	ldi	r19, 0xFF	; 255
 59c:	4f e7       	ldi	r20, 0x7F	; 127
 59e:	57 e4       	ldi	r21, 0x47	; 71
 5a0:	6f a9       	ldd	r22, Y+55	; 0x37
 5a2:	78 ad       	ldd	r23, Y+56	; 0x38
 5a4:	89 ad       	ldd	r24, Y+57	; 0x39
 5a6:	9a ad       	ldd	r25, Y+58	; 0x3a
 5a8:	3b d1       	rcall	.+630    	; 0x820 <__gesf2>
 5aa:	18 16       	cp	r1, r24
 5ac:	34 f5       	brge	.+76     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	40 e2       	ldi	r20, 0x20	; 32
 5b4:	51 e4       	ldi	r21, 0x41	; 65
 5b6:	69 89       	ldd	r22, Y+17	; 0x11
 5b8:	7a 89       	ldd	r23, Y+18	; 0x12
 5ba:	8b 89       	ldd	r24, Y+19	; 0x13
 5bc:	9c 89       	ldd	r25, Y+20	; 0x14
 5be:	34 d1       	rcall	.+616    	; 0x828 <__mulsf3>
 5c0:	dc 01       	movw	r26, r24
 5c2:	cb 01       	movw	r24, r22
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	b2 d0       	rcall	.+356    	; 0x72e <__fixunssfsi>
 5ca:	dc 01       	movw	r26, r24
 5cc:	cb 01       	movw	r24, r22
 5ce:	9c af       	std	Y+60, r25	; 0x3c
 5d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
 5d2:	8b ad       	ldd	r24, Y+59	; 0x3b
 5d4:	9c ad       	ldd	r25, Y+60	; 0x3c
 5d6:	89 2b       	or	r24, r25
 5d8:	69 f1       	breq	.+90     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 5da:	80 e9       	ldi	r24, 0x90	; 144
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	9e af       	std	Y+62, r25	; 0x3e
 5e0:	8d af       	std	Y+61, r24	; 0x3d
 5e2:	8d ad       	ldd	r24, Y+61	; 0x3d
 5e4:	9e ad       	ldd	r25, Y+62	; 0x3e
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5ea:	9e af       	std	Y+62, r25	; 0x3e
 5ec:	8d af       	std	Y+61, r24	; 0x3d
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ee:	8b ad       	ldd	r24, Y+59	; 0x3b
 5f0:	9c ad       	ldd	r25, Y+60	; 0x3c
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	9c af       	std	Y+60, r25	; 0x3c
 5f6:	8b af       	std	Y+59, r24	; 0x3b
 5f8:	ec cf       	rjmp	.-40     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5fa:	6f a9       	ldd	r22, Y+55	; 0x37
 5fc:	78 ad       	ldd	r23, Y+56	; 0x38
 5fe:	89 ad       	ldd	r24, Y+57	; 0x39
 600:	9a ad       	ldd	r25, Y+58	; 0x3a
 602:	95 d0       	rcall	.+298    	; 0x72e <__fixunssfsi>
 604:	dc 01       	movw	r26, r24
 606:	cb 01       	movw	r24, r22
 608:	9c af       	std	Y+60, r25	; 0x3c
 60a:	8b af       	std	Y+59, r24	; 0x3b
 60c:	2b ad       	ldd	r18, Y+59	; 0x3b
 60e:	3c ad       	ldd	r19, Y+60	; 0x3c
 610:	ce 01       	movw	r24, r28
 612:	cf 96       	adiw	r24, 0x3f	; 63
 614:	fc 01       	movw	r30, r24
 616:	31 83       	std	Z+1, r19	; 0x01
 618:	20 83       	st	Z, r18
 61a:	ce 01       	movw	r24, r28
 61c:	cf 96       	adiw	r24, 0x3f	; 63
 61e:	fc 01       	movw	r30, r24
 620:	80 81       	ld	r24, Z
 622:	91 81       	ldd	r25, Z+1	; 0x01
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 628:	9e 01       	movw	r18, r28
 62a:	21 5c       	subi	r18, 0xC1	; 193
 62c:	3f 4f       	sbci	r19, 0xFF	; 255
 62e:	f9 01       	movw	r30, r18
 630:	91 83       	std	Z+1, r25	; 0x01
 632:	80 83       	st	Z, r24
		_delay_ms(1000);
		PORTB = (0 << led1) | (0 << led2) | (0 << led5) | (0 << led6);
 634:	85 e2       	ldi	r24, 0x25	; 37
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fc 01       	movw	r30, r24
 63a:	10 82       	st	Z, r1
		PORTB = (1 << led0) | (1 << led3) | (1 << led4) | (1 << led7);
 63c:	85 e2       	ldi	r24, 0x25	; 37
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	29 e9       	ldi	r18, 0x99	; 153
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	aa e7       	ldi	r26, 0x7A	; 122
 64c:	b4 e4       	ldi	r27, 0x44	; 68
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	9a 83       	std	Y+2, r25	; 0x02
 652:	ab 83       	std	Y+3, r26	; 0x03
 654:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	4a e7       	ldi	r20, 0x7A	; 122
 65c:	55 e4       	ldi	r21, 0x45	; 69
 65e:	69 81       	ldd	r22, Y+1	; 0x01
 660:	7a 81       	ldd	r23, Y+2	; 0x02
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	9c 81       	ldd	r25, Y+4	; 0x04
 666:	e0 d0       	rcall	.+448    	; 0x828 <__mulsf3>
 668:	dc 01       	movw	r26, r24
 66a:	cb 01       	movw	r24, r22
 66c:	8d a7       	std	Y+45, r24	; 0x2d
 66e:	9e a7       	std	Y+46, r25	; 0x2e
 670:	af a7       	std	Y+47, r26	; 0x2f
 672:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	5f e3       	ldi	r21, 0x3F	; 63
 67c:	6d a5       	ldd	r22, Y+45	; 0x2d
 67e:	7e a5       	ldd	r23, Y+46	; 0x2e
 680:	8f a5       	ldd	r24, Y+47	; 0x2f
 682:	98 a9       	ldd	r25, Y+48	; 0x30
 684:	50 d0       	rcall	.+160    	; 0x726 <__cmpsf2>
 686:	88 23       	and	r24, r24
 688:	2c f4       	brge	.+10     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
		__ticks = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9a ab       	std	Y+50, r25	; 0x32
 690:	89 ab       	std	Y+49, r24	; 0x31
 692:	3a c0       	rjmp	.+116    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
	else if (__tmp > 65535)
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	3f ef       	ldi	r19, 0xFF	; 255
 698:	4f e7       	ldi	r20, 0x7F	; 127
 69a:	57 e4       	ldi	r21, 0x47	; 71
 69c:	6d a5       	ldd	r22, Y+45	; 0x2d
 69e:	7e a5       	ldd	r23, Y+46	; 0x2e
 6a0:	8f a5       	ldd	r24, Y+47	; 0x2f
 6a2:	98 a9       	ldd	r25, Y+48	; 0x30
 6a4:	bd d0       	rcall	.+378    	; 0x820 <__gesf2>
 6a6:	18 16       	cp	r1, r24
 6a8:	34 f5       	brge	.+76     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	40 e2       	ldi	r20, 0x20	; 32
 6b0:	51 e4       	ldi	r21, 0x41	; 65
 6b2:	69 81       	ldd	r22, Y+1	; 0x01
 6b4:	7a 81       	ldd	r23, Y+2	; 0x02
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	b6 d0       	rcall	.+364    	; 0x828 <__mulsf3>
 6bc:	dc 01       	movw	r26, r24
 6be:	cb 01       	movw	r24, r22
 6c0:	bc 01       	movw	r22, r24
 6c2:	cd 01       	movw	r24, r26
 6c4:	34 d0       	rcall	.+104    	; 0x72e <__fixunssfsi>
 6c6:	dc 01       	movw	r26, r24
 6c8:	cb 01       	movw	r24, r22
 6ca:	9a ab       	std	Y+50, r25	; 0x32
 6cc:	89 ab       	std	Y+49, r24	; 0x31
		while(__ticks)
 6ce:	89 a9       	ldd	r24, Y+49	; 0x31
 6d0:	9a a9       	ldd	r25, Y+50	; 0x32
 6d2:	89 2b       	or	r24, r25
 6d4:	19 f1       	breq	.+70     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 6d6:	80 e9       	ldi	r24, 0x90	; 144
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	9c ab       	std	Y+52, r25	; 0x34
 6dc:	8b ab       	std	Y+51, r24	; 0x33
 6de:	8b a9       	ldd	r24, Y+51	; 0x33
 6e0:	9c a9       	ldd	r25, Y+52	; 0x34
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6e6:	9c ab       	std	Y+52, r25	; 0x34
 6e8:	8b ab       	std	Y+51, r24	; 0x33
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ea:	89 a9       	ldd	r24, Y+49	; 0x31
 6ec:	9a a9       	ldd	r25, Y+50	; 0x32
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	9a ab       	std	Y+50, r25	; 0x32
 6f2:	89 ab       	std	Y+49, r24	; 0x31
 6f4:	ec cf       	rjmp	.-40     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6f6:	6d a5       	ldd	r22, Y+45	; 0x2d
 6f8:	7e a5       	ldd	r23, Y+46	; 0x2e
 6fa:	8f a5       	ldd	r24, Y+47	; 0x2f
 6fc:	98 a9       	ldd	r25, Y+48	; 0x30
 6fe:	17 d0       	rcall	.+46     	; 0x72e <__fixunssfsi>
 700:	dc 01       	movw	r26, r24
 702:	cb 01       	movw	r24, r22
 704:	9a ab       	std	Y+50, r25	; 0x32
 706:	89 ab       	std	Y+49, r24	; 0x31
 708:	89 a9       	ldd	r24, Y+49	; 0x31
 70a:	9a a9       	ldd	r25, Y+50	; 0x32
 70c:	9e ab       	std	Y+54, r25	; 0x36
 70e:	8d ab       	std	Y+53, r24	; 0x35
 710:	8d a9       	ldd	r24, Y+53	; 0x35
 712:	9e a9       	ldd	r25, Y+54	; 0x36
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 718:	9e ab       	std	Y+54, r25	; 0x36
 71a:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1000);
		PORTB = (0 << led0) | (0 << led3) | (0 << led4) | (0 << led7);
 71c:	85 e2       	ldi	r24, 0x25	; 37
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	fc 01       	movw	r30, r24
 722:	10 82       	st	Z, r1



	DDRB = 0b11111111;

	while(1){
 724:	a0 cd       	rjmp	.-1216   	; 0x266 <main+0x1ec>

00000726 <__cmpsf2>:
 726:	2f d0       	rcall	.+94     	; 0x786 <__fp_cmp>
 728:	08 f4       	brcc	.+2      	; 0x72c <__cmpsf2+0x6>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret

0000072e <__fixunssfsi>:
 72e:	57 d0       	rcall	.+174    	; 0x7de <__fp_splitA>
 730:	88 f0       	brcs	.+34     	; 0x754 <__fixunssfsi+0x26>
 732:	9f 57       	subi	r25, 0x7F	; 127
 734:	90 f0       	brcs	.+36     	; 0x75a <__fixunssfsi+0x2c>
 736:	b9 2f       	mov	r27, r25
 738:	99 27       	eor	r25, r25
 73a:	b7 51       	subi	r27, 0x17	; 23
 73c:	a0 f0       	brcs	.+40     	; 0x766 <__fixunssfsi+0x38>
 73e:	d1 f0       	breq	.+52     	; 0x774 <__fixunssfsi+0x46>
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	1a f0       	brmi	.+6      	; 0x750 <__fixunssfsi+0x22>
 74a:	ba 95       	dec	r27
 74c:	c9 f7       	brne	.-14     	; 0x740 <__fixunssfsi+0x12>
 74e:	12 c0       	rjmp	.+36     	; 0x774 <__fixunssfsi+0x46>
 750:	b1 30       	cpi	r27, 0x01	; 1
 752:	81 f0       	breq	.+32     	; 0x774 <__fixunssfsi+0x46>
 754:	5e d0       	rcall	.+188    	; 0x812 <__fp_zero>
 756:	b1 e0       	ldi	r27, 0x01	; 1
 758:	08 95       	ret
 75a:	5b c0       	rjmp	.+182    	; 0x812 <__fp_zero>
 75c:	67 2f       	mov	r22, r23
 75e:	78 2f       	mov	r23, r24
 760:	88 27       	eor	r24, r24
 762:	b8 5f       	subi	r27, 0xF8	; 248
 764:	39 f0       	breq	.+14     	; 0x774 <__fixunssfsi+0x46>
 766:	b9 3f       	cpi	r27, 0xF9	; 249
 768:	cc f3       	brlt	.-14     	; 0x75c <__fixunssfsi+0x2e>
 76a:	86 95       	lsr	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b3 95       	inc	r27
 772:	d9 f7       	brne	.-10     	; 0x76a <__fixunssfsi+0x3c>
 774:	3e f4       	brtc	.+14     	; 0x784 <__fixunssfsi+0x56>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__fp_cmp>:
 786:	99 0f       	add	r25, r25
 788:	00 08       	sbc	r0, r0
 78a:	55 0f       	add	r21, r21
 78c:	aa 0b       	sbc	r26, r26
 78e:	e0 e8       	ldi	r30, 0x80	; 128
 790:	fe ef       	ldi	r31, 0xFE	; 254
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	e8 07       	cpc	r30, r24
 798:	f9 07       	cpc	r31, r25
 79a:	c0 f0       	brcs	.+48     	; 0x7cc <__fp_cmp+0x46>
 79c:	12 16       	cp	r1, r18
 79e:	13 06       	cpc	r1, r19
 7a0:	e4 07       	cpc	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	98 f0       	brcs	.+38     	; 0x7cc <__fp_cmp+0x46>
 7a6:	62 1b       	sub	r22, r18
 7a8:	73 0b       	sbc	r23, r19
 7aa:	84 0b       	sbc	r24, r20
 7ac:	95 0b       	sbc	r25, r21
 7ae:	39 f4       	brne	.+14     	; 0x7be <__fp_cmp+0x38>
 7b0:	0a 26       	eor	r0, r26
 7b2:	61 f0       	breq	.+24     	; 0x7cc <__fp_cmp+0x46>
 7b4:	23 2b       	or	r18, r19
 7b6:	24 2b       	or	r18, r20
 7b8:	25 2b       	or	r18, r21
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <__fp_cmp+0x3e>
 7bc:	08 95       	ret
 7be:	0a 26       	eor	r0, r26
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__fp_cmp+0x3e>
 7c2:	a1 40       	sbci	r26, 0x01	; 1
 7c4:	a6 95       	lsr	r26
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	81 1d       	adc	r24, r1
 7ca:	81 1d       	adc	r24, r1
 7cc:	08 95       	ret

000007ce <__fp_split3>:
 7ce:	57 fd       	sbrc	r21, 7
 7d0:	90 58       	subi	r25, 0x80	; 128
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__fp_splitA+0x10>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__fp_splitA+0x1a>
 7dc:	47 95       	ror	r20

000007de <__fp_splitA>:
 7de:	88 0f       	add	r24, r24
 7e0:	97 fb       	bst	r25, 7
 7e2:	99 1f       	adc	r25, r25
 7e4:	61 f0       	breq	.+24     	; 0x7fe <__fp_splitA+0x20>
 7e6:	9f 3f       	cpi	r25, 0xFF	; 255
 7e8:	79 f0       	breq	.+30     	; 0x808 <__fp_splitA+0x2a>
 7ea:	87 95       	ror	r24
 7ec:	08 95       	ret
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	f2 cf       	rjmp	.-28     	; 0x7dc <__fp_split3+0xe>
 7f8:	46 95       	lsr	r20
 7fa:	f1 df       	rcall	.-30     	; 0x7de <__fp_splitA>
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <__fp_splitA+0x30>
 7fe:	16 16       	cp	r1, r22
 800:	17 06       	cpc	r1, r23
 802:	18 06       	cpc	r1, r24
 804:	99 1f       	adc	r25, r25
 806:	f1 cf       	rjmp	.-30     	; 0x7ea <__fp_splitA+0xc>
 808:	86 95       	lsr	r24
 80a:	71 05       	cpc	r23, r1
 80c:	61 05       	cpc	r22, r1
 80e:	08 94       	sec
 810:	08 95       	ret

00000812 <__fp_zero>:
 812:	e8 94       	clt

00000814 <__fp_szero>:
 814:	bb 27       	eor	r27, r27
 816:	66 27       	eor	r22, r22
 818:	77 27       	eor	r23, r23
 81a:	cb 01       	movw	r24, r22
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__gesf2>:
 820:	b2 df       	rcall	.-156    	; 0x786 <__fp_cmp>
 822:	08 f4       	brcc	.+2      	; 0x826 <__gesf2+0x6>
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	08 95       	ret

00000828 <__mulsf3>:
 828:	0b d0       	rcall	.+22     	; 0x840 <__mulsf3x>
 82a:	78 c0       	rjmp	.+240    	; 0x91c <__fp_round>
 82c:	69 d0       	rcall	.+210    	; 0x900 <__fp_pscA>
 82e:	28 f0       	brcs	.+10     	; 0x83a <__mulsf3+0x12>
 830:	6e d0       	rcall	.+220    	; 0x90e <__fp_pscB>
 832:	18 f0       	brcs	.+6      	; 0x83a <__mulsf3+0x12>
 834:	95 23       	and	r25, r21
 836:	09 f0       	breq	.+2      	; 0x83a <__mulsf3+0x12>
 838:	5a c0       	rjmp	.+180    	; 0x8ee <__fp_inf>
 83a:	5f c0       	rjmp	.+190    	; 0x8fa <__fp_nan>
 83c:	11 24       	eor	r1, r1
 83e:	ea cf       	rjmp	.-44     	; 0x814 <__fp_szero>

00000840 <__mulsf3x>:
 840:	c6 df       	rcall	.-116    	; 0x7ce <__fp_split3>
 842:	a0 f3       	brcs	.-24     	; 0x82c <__mulsf3+0x4>

00000844 <__mulsf3_pse>:
 844:	95 9f       	mul	r25, r21
 846:	d1 f3       	breq	.-12     	; 0x83c <__mulsf3+0x14>
 848:	95 0f       	add	r25, r21
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	55 1f       	adc	r21, r21
 84e:	62 9f       	mul	r22, r18
 850:	f0 01       	movw	r30, r0
 852:	72 9f       	mul	r23, r18
 854:	bb 27       	eor	r27, r27
 856:	f0 0d       	add	r31, r0
 858:	b1 1d       	adc	r27, r1
 85a:	63 9f       	mul	r22, r19
 85c:	aa 27       	eor	r26, r26
 85e:	f0 0d       	add	r31, r0
 860:	b1 1d       	adc	r27, r1
 862:	aa 1f       	adc	r26, r26
 864:	64 9f       	mul	r22, r20
 866:	66 27       	eor	r22, r22
 868:	b0 0d       	add	r27, r0
 86a:	a1 1d       	adc	r26, r1
 86c:	66 1f       	adc	r22, r22
 86e:	82 9f       	mul	r24, r18
 870:	22 27       	eor	r18, r18
 872:	b0 0d       	add	r27, r0
 874:	a1 1d       	adc	r26, r1
 876:	62 1f       	adc	r22, r18
 878:	73 9f       	mul	r23, r19
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	62 1f       	adc	r22, r18
 880:	83 9f       	mul	r24, r19
 882:	a0 0d       	add	r26, r0
 884:	61 1d       	adc	r22, r1
 886:	22 1f       	adc	r18, r18
 888:	74 9f       	mul	r23, r20
 88a:	33 27       	eor	r19, r19
 88c:	a0 0d       	add	r26, r0
 88e:	61 1d       	adc	r22, r1
 890:	23 1f       	adc	r18, r19
 892:	84 9f       	mul	r24, r20
 894:	60 0d       	add	r22, r0
 896:	21 1d       	adc	r18, r1
 898:	82 2f       	mov	r24, r18
 89a:	76 2f       	mov	r23, r22
 89c:	6a 2f       	mov	r22, r26
 89e:	11 24       	eor	r1, r1
 8a0:	9f 57       	subi	r25, 0x7F	; 127
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	8a f0       	brmi	.+34     	; 0x8c8 <__mulsf3_pse+0x84>
 8a6:	e1 f0       	breq	.+56     	; 0x8e0 <__mulsf3_pse+0x9c>
 8a8:	88 23       	and	r24, r24
 8aa:	4a f0       	brmi	.+18     	; 0x8be <__mulsf3_pse+0x7a>
 8ac:	ee 0f       	add	r30, r30
 8ae:	ff 1f       	adc	r31, r31
 8b0:	bb 1f       	adc	r27, r27
 8b2:	66 1f       	adc	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	a9 f7       	brne	.-22     	; 0x8a8 <__mulsf3_pse+0x64>
 8be:	9e 3f       	cpi	r25, 0xFE	; 254
 8c0:	51 05       	cpc	r21, r1
 8c2:	70 f0       	brcs	.+28     	; 0x8e0 <__mulsf3_pse+0x9c>
 8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__fp_inf>
 8c6:	a6 cf       	rjmp	.-180    	; 0x814 <__fp_szero>
 8c8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ca:	ec f3       	brlt	.-6      	; 0x8c6 <__mulsf3_pse+0x82>
 8cc:	98 3e       	cpi	r25, 0xE8	; 232
 8ce:	dc f3       	brlt	.-10     	; 0x8c6 <__mulsf3_pse+0x82>
 8d0:	86 95       	lsr	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f7 95       	ror	r31
 8da:	e7 95       	ror	r30
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	c1 f7       	brne	.-16     	; 0x8d0 <__mulsf3_pse+0x8c>
 8e0:	fe 2b       	or	r31, r30
 8e2:	88 0f       	add	r24, r24
 8e4:	91 1d       	adc	r25, r1
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__fp_inf>:
 8ee:	97 f9       	bld	r25, 7
 8f0:	9f 67       	ori	r25, 0x7F	; 127
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__fp_nan>:
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	80 ec       	ldi	r24, 0xC0	; 192
 8fe:	08 95       	ret

00000900 <__fp_pscA>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	16 16       	cp	r1, r22
 906:	17 06       	cpc	r1, r23
 908:	18 06       	cpc	r1, r24
 90a:	09 06       	cpc	r0, r25
 90c:	08 95       	ret

0000090e <__fp_pscB>:
 90e:	00 24       	eor	r0, r0
 910:	0a 94       	dec	r0
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	05 06       	cpc	r0, r21
 91a:	08 95       	ret

0000091c <__fp_round>:
 91c:	09 2e       	mov	r0, r25
 91e:	03 94       	inc	r0
 920:	00 0c       	add	r0, r0
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0xc>
 924:	88 23       	and	r24, r24
 926:	52 f0       	brmi	.+20     	; 0x93c <__fp_round+0x20>
 928:	bb 0f       	add	r27, r27
 92a:	40 f4       	brcc	.+16     	; 0x93c <__fp_round+0x20>
 92c:	bf 2b       	or	r27, r31
 92e:	11 f4       	brne	.+4      	; 0x934 <__fp_round+0x18>
 930:	60 ff       	sbrs	r22, 0
 932:	04 c0       	rjmp	.+8      	; 0x93c <__fp_round+0x20>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
