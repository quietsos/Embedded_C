
IO_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000634  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000006c8  2**0
                  ALLOC
  3 .stab         000007e0  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf7  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002786  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  88:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinMode>:




//DDRX used for pinMode
void pinMode(uint8_t pin , uint8_t volatile *pin_data_direction_register, uint8_t Mode){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <pinMode+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <pinMode+0x8>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	7b 83       	std	Y+3, r23	; 0x03
  a0:	6a 83       	std	Y+2, r22	; 0x02
  a2:	4c 83       	std	Y+4, r20	; 0x04

	if(Mode == OUTPUT){
  a4:	8c 81       	ldd	r24, Y+4	; 0x04
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	b1 f4       	brne	.+44     	; 0xd6 <pinMode+0x46>
		*pin_data_direction_register |= (1 << pin);
  aa:	8a 81       	ldd	r24, Y+2	; 0x02
  ac:	9b 81       	ldd	r25, Y+3	; 0x03
  ae:	fc 01       	movw	r30, r24
  b0:	80 81       	ld	r24, Z
  b2:	48 2f       	mov	r20, r24
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	28 2f       	mov	r18, r24
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x34>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	2a 95       	dec	r18
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x30>
  c8:	84 2b       	or	r24, r20
  ca:	28 2f       	mov	r18, r24
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	9b 81       	ldd	r25, Y+3	; 0x03
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	}
	else if (Mode == INPUT){
		*pin_data_direction_register &= ~(1 << pin);
	}
}
  d4:	19 c0       	rjmp	.+50     	; 0x108 <pinMode+0x78>
void pinMode(uint8_t pin , uint8_t volatile *pin_data_direction_register, uint8_t Mode){

	if(Mode == OUTPUT){
		*pin_data_direction_register |= (1 << pin);
	}
	else if (Mode == INPUT){
  d6:	8c 81       	ldd	r24, Y+4	; 0x04
  d8:	88 23       	and	r24, r24
  da:	b1 f4       	brne	.+44     	; 0x108 <pinMode+0x78>
		*pin_data_direction_register &= ~(1 << pin);
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <pinMode+0x66>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <pinMode+0x62>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	28 2f       	mov	r18, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	9b 81       	ldd	r25, Y+3	; 0x03
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	}
}
 108:	00 00       	nop
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <digitalWrite>:


//PORTX used to write pin status high and low
void digitalWrite(uint8_t pin, uint8_t volatile *port_data_pin_register, uint8_t state){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <digitalWrite+0x6>
 11e:	00 d0       	rcall	.+0      	; 0x120 <digitalWrite+0x8>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	7b 83       	std	Y+3, r23	; 0x03
 128:	6a 83       	std	Y+2, r22	; 0x02
 12a:	4c 83       	std	Y+4, r20	; 0x04
	if(state == HIGH){
 12c:	8c 81       	ldd	r24, Y+4	; 0x04
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	b1 f4       	brne	.+44     	; 0x15e <digitalWrite+0x46>
		*port_data_pin_register |= (1 << pin);
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <digitalWrite+0x34>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	2a 95       	dec	r18
 14e:	e2 f7       	brpl	.-8      	; 0x148 <digitalWrite+0x30>
 150:	84 2b       	or	r24, r20
 152:	28 2f       	mov	r18, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	}
	else if(state == LOW){
		*port_data_pin_register &= ~(1 << pin);
	}
}
 15c:	19 c0       	rjmp	.+50     	; 0x190 <digitalWrite+0x78>
//PORTX used to write pin status high and low
void digitalWrite(uint8_t pin, uint8_t volatile *port_data_pin_register, uint8_t state){
	if(state == HIGH){
		*port_data_pin_register |= (1 << pin);
	}
	else if(state == LOW){
 15e:	8c 81       	ldd	r24, Y+4	; 0x04
 160:	88 23       	and	r24, r24
 162:	b1 f4       	brne	.+44     	; 0x190 <digitalWrite+0x78>
		*port_data_pin_register &= ~(1 << pin);
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	9b 81       	ldd	r25, Y+3	; 0x03
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	48 2f       	mov	r20, r24
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <digitalWrite+0x66>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <digitalWrite+0x62>
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	28 2f       	mov	r18, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	9b 81       	ldd	r25, Y+3	; 0x03
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
	}
}
 190:	00 00       	nop
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <digitalRead>:


//PINX is used to read pin status
uint8_t digitalRead(uint8_t pin, uint8_t volatile *port_input_pin_register){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <digitalRead+0x6>
 1a6:	1f 92       	push	r1
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	7b 83       	std	Y+3, r23	; 0x03
 1b0:	6a 83       	std	Y+2, r22	; 0x02

	return ((*port_input_pin_register) & (1 << pin));
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <digitalRead+0x2c>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <digitalRead+0x28>
 1d0:	84 23       	and	r24, r20
}
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <main>:


int main(){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	6c 97       	sbiw	r28, 0x1c	; 28
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
//
//	};


//	UART_Init0();
	pinMode(led, &DDRB, OUTPUT);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	64 e2       	ldi	r22, 0x24	; 36
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	0e 94 48 00 	call	0x90	; 0x90 <pinMode>
	pinMode(readSensor, &DDRB, INPUT);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	64 e2       	ldi	r22, 0x24	; 36
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	0e 94 48 00 	call	0x90	; 0x90 <pinMode>

	data = digitalRead(readSensor, &PINB);
 20a:	63 e2       	ldi	r22, 0x23	; 35
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <digitalRead>
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
//	UART_Printf(data);


	while(1){
		digitalWrite(led, &PORTB, HIGH);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	65 e2       	ldi	r22, 0x25	; 37
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	aa e7       	ldi	r26, 0x7A	; 122
 22a:	b4 e4       	ldi	r27, 0x44	; 68
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	7a 81       	ldd	r23, Y+2	; 0x02
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 248:	dc 01       	movw	r26, r24
 24a:	cb 01       	movw	r24, r22
 24c:	8b 8b       	std	Y+19, r24	; 0x13
 24e:	9c 8b       	std	Y+20, r25	; 0x14
 250:	ad 8b       	std	Y+21, r26	; 0x15
 252:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5f e3       	ldi	r21, 0x3F	; 63
 25c:	6b 89       	ldd	r22, Y+19	; 0x13
 25e:	7c 89       	ldd	r23, Y+20	; 0x14
 260:	8d 89       	ldd	r24, Y+21	; 0x15
 262:	9e 89       	ldd	r25, Y+22	; 0x16
 264:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__cmpsf2>
 268:	88 23       	and	r24, r24
 26a:	2c f4       	brge	.+10     	; 0x276 <main+0x98>
		__ticks = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	98 8f       	std	Y+24, r25	; 0x18
 272:	8f 8b       	std	Y+23, r24	; 0x17
 274:	3f c0       	rjmp	.+126    	; 0x2f4 <main+0x116>
	else if (__tmp > 65535)
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	3f ef       	ldi	r19, 0xFF	; 255
 27a:	4f e7       	ldi	r20, 0x7F	; 127
 27c:	57 e4       	ldi	r21, 0x47	; 71
 27e:	6b 89       	ldd	r22, Y+19	; 0x13
 280:	7c 89       	ldd	r23, Y+20	; 0x14
 282:	8d 89       	ldd	r24, Y+21	; 0x15
 284:	9e 89       	ldd	r25, Y+22	; 0x16
 286:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__gesf2>
 28a:	18 16       	cp	r1, r24
 28c:	4c f5       	brge	.+82     	; 0x2e0 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e2       	ldi	r20, 0x20	; 32
 294:	51 e4       	ldi	r21, 0x41	; 65
 296:	69 81       	ldd	r22, Y+1	; 0x01
 298:	7a 81       	ldd	r23, Y+2	; 0x02
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	9c 81       	ldd	r25, Y+4	; 0x04
 29e:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 2a2:	dc 01       	movw	r26, r24
 2a4:	cb 01       	movw	r24, r22
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 2ae:	dc 01       	movw	r26, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	98 8f       	std	Y+24, r25	; 0x18
 2b4:	8f 8b       	std	Y+23, r24	; 0x17
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <main+0xf8>
 2b8:	80 e9       	ldi	r24, 0x90	; 144
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9a 8f       	std	Y+26, r25	; 0x1a
 2be:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c0:	89 8d       	ldd	r24, Y+25	; 0x19
 2c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0xe6>
 2c8:	9a 8f       	std	Y+26, r25	; 0x1a
 2ca:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2cc:	8f 89       	ldd	r24, Y+23	; 0x17
 2ce:	98 8d       	ldd	r25, Y+24	; 0x18
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	98 8f       	std	Y+24, r25	; 0x18
 2d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	8f 89       	ldd	r24, Y+23	; 0x17
 2d8:	98 8d       	ldd	r25, Y+24	; 0x18
 2da:	89 2b       	or	r24, r25
 2dc:	69 f7       	brne	.-38     	; 0x2b8 <main+0xda>
 2de:	14 c0       	rjmp	.+40     	; 0x308 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e0:	6b 89       	ldd	r22, Y+19	; 0x13
 2e2:	7c 89       	ldd	r23, Y+20	; 0x14
 2e4:	8d 89       	ldd	r24, Y+21	; 0x15
 2e6:	9e 89       	ldd	r25, Y+22	; 0x16
 2e8:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 2ec:	dc 01       	movw	r26, r24
 2ee:	cb 01       	movw	r24, r22
 2f0:	98 8f       	std	Y+24, r25	; 0x18
 2f2:	8f 8b       	std	Y+23, r24	; 0x17
 2f4:	8f 89       	ldd	r24, Y+23	; 0x17
 2f6:	98 8d       	ldd	r25, Y+24	; 0x18
 2f8:	9c 8f       	std	Y+28, r25	; 0x1c
 2fa:	8b 8f       	std	Y+27, r24	; 0x1b
 2fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x122>
 304:	9c 8f       	std	Y+28, r25	; 0x1c
 306:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		digitalWrite(led, &PORTB, LOW);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	65 e2       	ldi	r22, 0x25	; 37
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	85 e0       	ldi	r24, 0x05	; 5
 310:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	aa e7       	ldi	r26, 0x7A	; 122
 31a:	b4 e4       	ldi	r27, 0x44	; 68
 31c:	8d 83       	std	Y+5, r24	; 0x05
 31e:	9e 83       	std	Y+6, r25	; 0x06
 320:	af 83       	std	Y+7, r26	; 0x07
 322:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	4a e7       	ldi	r20, 0x7A	; 122
 32a:	55 e4       	ldi	r21, 0x45	; 69
 32c:	6d 81       	ldd	r22, Y+5	; 0x05
 32e:	7e 81       	ldd	r23, Y+6	; 0x06
 330:	8f 81       	ldd	r24, Y+7	; 0x07
 332:	98 85       	ldd	r25, Y+8	; 0x08
 334:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 338:	dc 01       	movw	r26, r24
 33a:	cb 01       	movw	r24, r22
 33c:	89 87       	std	Y+9, r24	; 0x09
 33e:	9a 87       	std	Y+10, r25	; 0x0a
 340:	ab 87       	std	Y+11, r26	; 0x0b
 342:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	69 85       	ldd	r22, Y+9	; 0x09
 34e:	7a 85       	ldd	r23, Y+10	; 0x0a
 350:	8b 85       	ldd	r24, Y+11	; 0x0b
 352:	9c 85       	ldd	r25, Y+12	; 0x0c
 354:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__cmpsf2>
 358:	88 23       	and	r24, r24
 35a:	2c f4       	brge	.+10     	; 0x366 <main+0x188>
		__ticks = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	9e 87       	std	Y+14, r25	; 0x0e
 362:	8d 87       	std	Y+13, r24	; 0x0d
 364:	3f c0       	rjmp	.+126    	; 0x3e4 <main+0x206>
	else if (__tmp > 65535)
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	3f ef       	ldi	r19, 0xFF	; 255
 36a:	4f e7       	ldi	r20, 0x7F	; 127
 36c:	57 e4       	ldi	r21, 0x47	; 71
 36e:	69 85       	ldd	r22, Y+9	; 0x09
 370:	7a 85       	ldd	r23, Y+10	; 0x0a
 372:	8b 85       	ldd	r24, Y+11	; 0x0b
 374:	9c 85       	ldd	r25, Y+12	; 0x0c
 376:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__gesf2>
 37a:	18 16       	cp	r1, r24
 37c:	4c f5       	brge	.+82     	; 0x3d0 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 e2       	ldi	r20, 0x20	; 32
 384:	51 e4       	ldi	r21, 0x41	; 65
 386:	6d 81       	ldd	r22, Y+5	; 0x05
 388:	7e 81       	ldd	r23, Y+6	; 0x06
 38a:	8f 81       	ldd	r24, Y+7	; 0x07
 38c:	98 85       	ldd	r25, Y+8	; 0x08
 38e:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 392:	dc 01       	movw	r26, r24
 394:	cb 01       	movw	r24, r22
 396:	bc 01       	movw	r22, r24
 398:	cd 01       	movw	r24, r26
 39a:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 39e:	dc 01       	movw	r26, r24
 3a0:	cb 01       	movw	r24, r22
 3a2:	9e 87       	std	Y+14, r25	; 0x0e
 3a4:	8d 87       	std	Y+13, r24	; 0x0d
 3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <main+0x1e8>
 3a8:	80 e9       	ldi	r24, 0x90	; 144
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	98 8b       	std	Y+16, r25	; 0x10
 3ae:	8f 87       	std	Y+15, r24	; 0x0f
 3b0:	8f 85       	ldd	r24, Y+15	; 0x0f
 3b2:	98 89       	ldd	r25, Y+16	; 0x10
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x1d6>
 3b8:	98 8b       	std	Y+16, r25	; 0x10
 3ba:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3be:	9e 85       	ldd	r25, Y+14	; 0x0e
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	9e 87       	std	Y+14, r25	; 0x0e
 3c4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3c8:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ca:	89 2b       	or	r24, r25
 3cc:	69 f7       	brne	.-38     	; 0x3a8 <main+0x1ca>
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3d0:	69 85       	ldd	r22, Y+9	; 0x09
 3d2:	7a 85       	ldd	r23, Y+10	; 0x0a
 3d4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3d6:	9c 85       	ldd	r25, Y+12	; 0x0c
 3d8:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 3dc:	dc 01       	movw	r26, r24
 3de:	cb 01       	movw	r24, r22
 3e0:	9e 87       	std	Y+14, r25	; 0x0e
 3e2:	8d 87       	std	Y+13, r24	; 0x0d
 3e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3e6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3e8:	9a 8b       	std	Y+18, r25	; 0x12
 3ea:	89 8b       	std	Y+17, r24	; 0x11
 3ec:	89 89       	ldd	r24, Y+17	; 0x11
 3ee:	9a 89       	ldd	r25, Y+18	; 0x12
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <main+0x212>
 3f4:	9a 8b       	std	Y+18, r25	; 0x12
 3f6:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(1000);
	}
 3f8:	0f cf       	rjmp	.-482    	; 0x218 <main+0x3a>

000003fa <__cmpsf2>:
 3fa:	0e 94 31 02 	call	0x462	; 0x462 <__fp_cmp>
 3fe:	08 f4       	brcc	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret

00000404 <__fixunssfsi>:
 404:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fp_splitA>
 408:	88 f0       	brcs	.+34     	; 0x42c <__fixunssfsi+0x28>
 40a:	9f 57       	subi	r25, 0x7F	; 127
 40c:	98 f0       	brcs	.+38     	; 0x434 <__fixunssfsi+0x30>
 40e:	b9 2f       	mov	r27, r25
 410:	99 27       	eor	r25, r25
 412:	b7 51       	subi	r27, 0x17	; 23
 414:	b0 f0       	brcs	.+44     	; 0x442 <__fixunssfsi+0x3e>
 416:	e1 f0       	breq	.+56     	; 0x450 <__fixunssfsi+0x4c>
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	1a f0       	brmi	.+6      	; 0x428 <__fixunssfsi+0x24>
 422:	ba 95       	dec	r27
 424:	c9 f7       	brne	.-14     	; 0x418 <__fixunssfsi+0x14>
 426:	14 c0       	rjmp	.+40     	; 0x450 <__fixunssfsi+0x4c>
 428:	b1 30       	cpi	r27, 0x01	; 1
 42a:	91 f0       	breq	.+36     	; 0x450 <__fixunssfsi+0x4c>
 42c:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_zero>
 430:	b1 e0       	ldi	r27, 0x01	; 1
 432:	08 95       	ret
 434:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_zero>
 438:	67 2f       	mov	r22, r23
 43a:	78 2f       	mov	r23, r24
 43c:	88 27       	eor	r24, r24
 43e:	b8 5f       	subi	r27, 0xF8	; 248
 440:	39 f0       	breq	.+14     	; 0x450 <__fixunssfsi+0x4c>
 442:	b9 3f       	cpi	r27, 0xF9	; 249
 444:	cc f3       	brlt	.-14     	; 0x438 <__fixunssfsi+0x34>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b3 95       	inc	r27
 44e:	d9 f7       	brne	.-10     	; 0x446 <__fixunssfsi+0x42>
 450:	3e f4       	brtc	.+14     	; 0x460 <__fixunssfsi+0x5c>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <__fp_cmp>:
 462:	99 0f       	add	r25, r25
 464:	00 08       	sbc	r0, r0
 466:	55 0f       	add	r21, r21
 468:	aa 0b       	sbc	r26, r26
 46a:	e0 e8       	ldi	r30, 0x80	; 128
 46c:	fe ef       	ldi	r31, 0xFE	; 254
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	e8 07       	cpc	r30, r24
 474:	f9 07       	cpc	r31, r25
 476:	c0 f0       	brcs	.+48     	; 0x4a8 <__fp_cmp+0x46>
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	e4 07       	cpc	r30, r20
 47e:	f5 07       	cpc	r31, r21
 480:	98 f0       	brcs	.+38     	; 0x4a8 <__fp_cmp+0x46>
 482:	62 1b       	sub	r22, r18
 484:	73 0b       	sbc	r23, r19
 486:	84 0b       	sbc	r24, r20
 488:	95 0b       	sbc	r25, r21
 48a:	39 f4       	brne	.+14     	; 0x49a <__fp_cmp+0x38>
 48c:	0a 26       	eor	r0, r26
 48e:	61 f0       	breq	.+24     	; 0x4a8 <__fp_cmp+0x46>
 490:	23 2b       	or	r18, r19
 492:	24 2b       	or	r18, r20
 494:	25 2b       	or	r18, r21
 496:	21 f4       	brne	.+8      	; 0x4a0 <__fp_cmp+0x3e>
 498:	08 95       	ret
 49a:	0a 26       	eor	r0, r26
 49c:	09 f4       	brne	.+2      	; 0x4a0 <__fp_cmp+0x3e>
 49e:	a1 40       	sbci	r26, 0x01	; 1
 4a0:	a6 95       	lsr	r26
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	81 1d       	adc	r24, r1
 4a6:	81 1d       	adc	r24, r1
 4a8:	08 95       	ret

000004aa <__fp_split3>:
 4aa:	57 fd       	sbrc	r21, 7
 4ac:	90 58       	subi	r25, 0x80	; 128
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	59 f0       	breq	.+22     	; 0x4ca <__fp_splitA+0x10>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <__fp_splitA+0x1a>
 4b8:	47 95       	ror	r20

000004ba <__fp_splitA>:
 4ba:	88 0f       	add	r24, r24
 4bc:	97 fb       	bst	r25, 7
 4be:	99 1f       	adc	r25, r25
 4c0:	61 f0       	breq	.+24     	; 0x4da <__fp_splitA+0x20>
 4c2:	9f 3f       	cpi	r25, 0xFF	; 255
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <__fp_splitA+0x2a>
 4c6:	87 95       	ror	r24
 4c8:	08 95       	ret
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	14 06       	cpc	r1, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	f2 cf       	rjmp	.-28     	; 0x4b8 <__fp_split3+0xe>
 4d4:	46 95       	lsr	r20
 4d6:	f1 df       	rcall	.-30     	; 0x4ba <__fp_splitA>
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__fp_splitA+0x30>
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	f1 cf       	rjmp	.-30     	; 0x4c6 <__fp_splitA+0xc>
 4e4:	86 95       	lsr	r24
 4e6:	71 05       	cpc	r23, r1
 4e8:	61 05       	cpc	r22, r1
 4ea:	08 94       	sec
 4ec:	08 95       	ret

000004ee <__fp_zero>:
 4ee:	e8 94       	clt

000004f0 <__fp_szero>:
 4f0:	bb 27       	eor	r27, r27
 4f2:	66 27       	eor	r22, r22
 4f4:	77 27       	eor	r23, r23
 4f6:	cb 01       	movw	r24, r22
 4f8:	97 f9       	bld	r25, 7
 4fa:	08 95       	ret

000004fc <__gesf2>:
 4fc:	0e 94 31 02 	call	0x462	; 0x462 <__fp_cmp>
 500:	08 f4       	brcc	.+2      	; 0x504 <__gesf2+0x8>
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	08 95       	ret

00000506 <__mulsf3>:
 506:	0e 94 96 02 	call	0x52c	; 0x52c <__mulsf3x>
 50a:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 50e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 512:	38 f0       	brcs	.+14     	; 0x522 <__mulsf3+0x1c>
 514:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 518:	20 f0       	brcs	.+8      	; 0x522 <__mulsf3+0x1c>
 51a:	95 23       	and	r25, r21
 51c:	11 f0       	breq	.+4      	; 0x522 <__mulsf3+0x1c>
 51e:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 522:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>
 526:	11 24       	eor	r1, r1
 528:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_szero>

0000052c <__mulsf3x>:
 52c:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_split3>
 530:	70 f3       	brcs	.-36     	; 0x50e <__mulsf3+0x8>

00000532 <__mulsf3_pse>:
 532:	95 9f       	mul	r25, r21
 534:	c1 f3       	breq	.-16     	; 0x526 <__mulsf3+0x20>
 536:	95 0f       	add	r25, r21
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	55 1f       	adc	r21, r21
 53c:	62 9f       	mul	r22, r18
 53e:	f0 01       	movw	r30, r0
 540:	72 9f       	mul	r23, r18
 542:	bb 27       	eor	r27, r27
 544:	f0 0d       	add	r31, r0
 546:	b1 1d       	adc	r27, r1
 548:	63 9f       	mul	r22, r19
 54a:	aa 27       	eor	r26, r26
 54c:	f0 0d       	add	r31, r0
 54e:	b1 1d       	adc	r27, r1
 550:	aa 1f       	adc	r26, r26
 552:	64 9f       	mul	r22, r20
 554:	66 27       	eor	r22, r22
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	66 1f       	adc	r22, r22
 55c:	82 9f       	mul	r24, r18
 55e:	22 27       	eor	r18, r18
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	62 1f       	adc	r22, r18
 566:	73 9f       	mul	r23, r19
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	62 1f       	adc	r22, r18
 56e:	83 9f       	mul	r24, r19
 570:	a0 0d       	add	r26, r0
 572:	61 1d       	adc	r22, r1
 574:	22 1f       	adc	r18, r18
 576:	74 9f       	mul	r23, r20
 578:	33 27       	eor	r19, r19
 57a:	a0 0d       	add	r26, r0
 57c:	61 1d       	adc	r22, r1
 57e:	23 1f       	adc	r18, r19
 580:	84 9f       	mul	r24, r20
 582:	60 0d       	add	r22, r0
 584:	21 1d       	adc	r18, r1
 586:	82 2f       	mov	r24, r18
 588:	76 2f       	mov	r23, r22
 58a:	6a 2f       	mov	r22, r26
 58c:	11 24       	eor	r1, r1
 58e:	9f 57       	subi	r25, 0x7F	; 127
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	9a f0       	brmi	.+38     	; 0x5ba <__mulsf3_pse+0x88>
 594:	f1 f0       	breq	.+60     	; 0x5d2 <__mulsf3_pse+0xa0>
 596:	88 23       	and	r24, r24
 598:	4a f0       	brmi	.+18     	; 0x5ac <__mulsf3_pse+0x7a>
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	bb 1f       	adc	r27, r27
 5a0:	66 1f       	adc	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	91 50       	subi	r25, 0x01	; 1
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	a9 f7       	brne	.-22     	; 0x596 <__mulsf3_pse+0x64>
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	51 05       	cpc	r21, r1
 5b0:	80 f0       	brcs	.+32     	; 0x5d2 <__mulsf3_pse+0xa0>
 5b2:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 5b6:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_szero>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	e4 f3       	brlt	.-8      	; 0x5b6 <__mulsf3_pse+0x84>
 5be:	98 3e       	cpi	r25, 0xE8	; 232
 5c0:	d4 f3       	brlt	.-12     	; 0x5b6 <__mulsf3_pse+0x84>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f7 95       	ror	r31
 5cc:	e7 95       	ror	r30
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	c1 f7       	brne	.-16     	; 0x5c2 <__mulsf3_pse+0x90>
 5d2:	fe 2b       	or	r31, r30
 5d4:	88 0f       	add	r24, r24
 5d6:	91 1d       	adc	r25, r1
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
